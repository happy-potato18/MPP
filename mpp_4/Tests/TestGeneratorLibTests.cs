using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using NUnit.Framework;
using TestGeneratorLib;

namespace Tests
{
    [TestFixture]
    public class TestGeneratorLibTests
    {
        public List<string> testcodeLines;
        [SetUp]
        public void Init()
        {
            testcodeLines = SingleFileContentTestGenerator.GenerateTestFile
                                    (new Tuple<string, List<string>>
                                    ("test", File.ReadAllLines(@"D:\”Õ» \5 ÒÂÏ\MPP(SPP)\mpp_4\mpp_4\bin\Debug\netcoreapp3.1\src\Writer.cs")
                                    .ToList()));
        }
        [Test]
        public void AddingUsings_CodeLines_ReturnsUsingStatement()
        {
            var expected = "using System;";
            var received = testcodeLines[0];
            Assert.AreEqual(expected, received);
        }

        [Test]
        public void AddingAttributes_CodeLines_ReturnsTrueIfFoind()
        {

            Assert.IsTrue((testcodeLines.Contains("\t[TestFixture]")) && (testcodeLines.Contains("\t\t[Test]")));
        }

        [Test]
        public void AddingTestClassName_CodeLines_ReturnsTestClassName()
        {

            var expected = "public class WriterTests";
            string received ="" ;
            foreach(var line in testcodeLines)
            {
                if(line.Contains("WriterTests"))
                {
                    received = line.Substring(0,line.Length-1).Trim();
                    break;
                }
            }
            Assert.AreEqual(expected, received);
        }

        [Test]
        public void AddingTestMethodName_CodeLines_ReturnsTestMethodName()
        {

            var expected = "public void WriteTest()";
            string received = "";
            foreach (var line in testcodeLines)
            {
                if (line.Contains("WriteTest()"))
                {
                    received = line.Substring(0, line.Length - 1).Trim();
                    break;
                }
            }
            Assert.AreEqual(expected, received);
        }

        [Test]
        public void AddingTestAssert_CodeLines_ReturnsTestAssertString()
        {

            var expected = "Assert.Fail(\"autogenerated\")";
            string received = "";
            foreach (var line in testcodeLines)
            {
                if (line.Contains("Assert"))
                {
                    received = line.Substring(0, line.Length - 1).Trim();
                    break;
                }
            }
            Assert.AreEqual(expected, received);
        }

        [Test]
        public void AddingFieldForSetup_CodeLines_ReturnsPrivateFieldString()
        {

            var expected = "private Writer _WriterUnderTest;";
            string received = "";
            foreach (var line in testcodeLines)
            {
                if (line.Contains("private"))
                {
                    received = line.Trim();
                    break;
                }
            }
            Assert.AreEqual(expected, received);
        }

        [Test]
        public void AddingSetup_CodeLines_ReturnsSetunLine()
        {

            var expected = "_WriterUnderTest = new Writer();";
            string received = "";
            foreach (var line in testcodeLines)
            {
                if (line.Contains("new"))
                {
                    received = line.Trim();
                    break;
                }
            }
            Assert.AreEqual(expected, received);
        }

        [Test]
        public void AddingParametersForMethod_CodeLines_ReturnsParameterDeclarationLine()
        {

            var expected = "Stream OutputStream = null;";
            string received = "";
            foreach (var line in testcodeLines)
            {
                if (line.Contains("null"))
                {
                    received = line.Trim();
                    break;
                }
            }
            Assert.AreEqual(expected, received);
        }

        [Test]
        public void AddingInvokingMethodlLine_CodeLines_ReturnsInvokingMethodLine()
        {

            var expected = "_WriterUnderTest.Write(info,OutputStream);";
            string received = "";
            foreach (var line in testcodeLines)
            {
                if (line.Contains(".Write("))
                {
                    received = line.Trim();
                    break;
                }
            }
            Assert.AreEqual(expected, received);
        }
    }
}